{"version":3,"file":"static/development/pages/api/graphql.js","sources":["webpack:///webpack/bootstrap","webpack:///./db/entity/PantsEntity.ts","webpack:///./db/entity/ProductEntity.ts","webpack:///./db/entity/ProductType.ts","webpack:///./db/entity/ShirtEntity.ts","webpack:///./graphql/Pants.ts","webpack:///./graphql/Product.ts","webpack:///./graphql/ProductResolver.ts","webpack:///./graphql/Shirt.ts","webpack:///./graphql/schema.ts","webpack:///./pages/api/graphql.ts","webpack:///external \"apollo-server-micro\"","webpack:///external \"class-validator\"","webpack:///external \"dotenv\"","webpack:///external \"reflect-metadata\"","webpack:///external \"type-graphql\"","webpack:///external \"typeorm\""],"sourcesContent":[" \t// The module cache\n \tvar installedModules = require('../../../../ssr-module-cache.js');\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tvar threw = true;\n \t\ttry {\n \t\t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n \t\t\tthrew = false;\n \t\t} finally {\n \t\t\tif(threw) delete installedModules[moduleId];\n \t\t}\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 5);\n","import { Check, Column, Entity, JoinColumn, OneToOne, PrimaryColumn } from 'typeorm';\n\n@Entity({ name: 'pants' })\n@Check(`\"width\" > 0 AND \"length\" > 0 AND \"color\" <> ''`)\nexport class PantsEntity {\n  @PrimaryColumn({ nullable: false })\n  id: number;\n\n  @Column({\n    nullable: false,\n  })\n  color: string;\n\n  @Column({\n    nullable: false,\n  })\n  width: number;\n\n  @Column({\n    nullable: false,\n  })\n  length: number;\n\n  @OneToOne('ProductEntity', { onDelete: 'CASCADE' })\n  @JoinColumn({ name: 'id' })\n  product: unknown;\n}\n","import { Entity, PrimaryGeneratedColumn, Column, OneToOne } from 'typeorm';\nimport { PantsEntity } from './PantsEntity';\nimport { ProductType, productTypes } from './ProductType';\nimport { ShirtEntity } from './ShirtEntity';\n\n@Entity({ name: 'product' })\nexport class ProductEntity {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column({ nullable: false })\n  name: string;\n\n  @Column({\n    type: 'enum',\n    enum: productTypes,\n    nullable: false,\n  })\n  type: ProductType;\n\n  @OneToOne('PantsEntity', 'product')\n  pants: PantsEntity;\n\n  @OneToOne('ShirtEntity', 'product')\n  shirt: ShirtEntity;\n}\n","export enum ProductType {\n  shirt = 'shirt',\n  pants = 'pants',\n}\n\nexport const productTypes = Object.values(ProductType) as ProductType[];\n","import { Check, Column, Entity, JoinColumn, OneToOne, PrimaryColumn } from 'typeorm';\n\nexport enum ShirtColor {\n  white = 'white',\n  grey = 'grey',\n  blue = 'blue',\n}\n\nconst shirtColors = Object.values(ShirtColor) as ShirtColor[];\n\n@Entity({ name: 'shirt' })\n@Check(`\"size\" > 0`)\nexport class ShirtEntity {\n  @PrimaryColumn({\n    nullable: false,\n  })\n  id: number;\n\n  @Column({\n    type: 'enum',\n    enum: shirtColors,\n    nullable: false,\n  })\n  color: ShirtColor;\n\n  @Column({\n    nullable: false,\n  })\n  size: number;\n\n  @OneToOne('ProductEntity', { onDelete: 'CASCADE' })\n  @JoinColumn({ name: 'id' })\n  product: unknown;\n}\n","import { Min, MinLength } from 'class-validator';\nimport { Field, Int, ObjectType } from 'type-graphql';\nimport { Product } from './Product';\n\n@ObjectType({ implements: Product })\nexport class Pants extends Product {\n  @Field()\n  @MinLength(1)\n  color: string;\n\n  @Field(() => Int)\n  @Min(1)\n  width: number;\n\n  @Field(() => Int)\n  @Min(1)\n  length: number;\n}\n","import { ProductType } from 'db/entity/ProductType';\nimport { Field, ID, InterfaceType, registerEnumType } from 'type-graphql';\n\nregisterEnumType(ProductType, {\n  name: 'ProductType',\n});\n\n@InterfaceType({\n  resolveType: (value) => {\n    if (value.type === 'shirt') {\n      return 'Shirt';\n    } else if (value.type === 'pants') {\n      return 'Pants';\n    } else {\n      throw new Error(`Unknown entity type: ${value.type}`);\n    }\n  },\n})\nexport abstract class Product {\n  @Field(() => ID)\n  id: number;\n\n  @Field()\n  name: string;\n\n  @Field(() => ProductType)\n  type: ProductType;\n}\n","import { Min, MinLength } from 'class-validator';\nimport { PantsEntity } from 'db/entity/PantsEntity';\nimport { ProductEntity } from 'db/entity/ProductEntity';\nimport { ProductType } from 'db/entity/ProductType';\nimport { Arg, Field, ID, InputType, Int, Mutation, Query, Resolver } from 'type-graphql';\nimport { getConnection, getRepository } from 'typeorm';\nimport { ShirtColor, ShirtEntity } from '../db/entity/ShirtEntity';\nimport { Pants } from './Pants';\nimport { Product } from './Product';\nimport { Shirt } from './Shirt';\n\n@InputType()\nclass AddShirtInput implements Partial<Shirt> {\n  @Field()\n  name: string;\n\n  @Field(() => ShirtColor)\n  color: ShirtColor;\n\n  @Field(() => Int)\n  @Min(1)\n  size: number;\n}\n\n@InputType()\nclass AddPantsInput implements Partial<Pants> {\n  @Field()\n  name: string;\n\n  @Field()\n  @MinLength(1)\n  color: string;\n\n  @Field(() => Int)\n  @Min(1)\n  width: number;\n\n  @Field(() => Int)\n  @Min(1)\n  length: number;\n}\n\n@Resolver(() => Product)\nexport class ProductResolver {\n  @Query(() => [Product])\n  async products(): Promise<Product[]> {\n    const products = await getRepository(ProductEntity).find({\n      relations: ['pants', 'shirt'],\n    });\n\n    const results = products.map((product) => {\n      if (product.type === 'shirt') {\n        return {\n          id: product.id,\n          name: product.name,\n          type: product.type,\n          color: product.shirt.color,\n          size: product.shirt.size,\n        };\n      } else if (product.type === 'pants') {\n        return {\n          id: product.id,\n          name: product.name,\n          type: product.type,\n          color: product.pants.color,\n          width: product.pants.width,\n          length: product.pants.length,\n        };\n      } else {\n        throw new Error('Unknown product type');\n      }\n    });\n    return results;\n  }\n\n  @Mutation(() => ID)\n  async removeProduct(@Arg('id', () => ID) id: number): Promise<number> {\n    await getRepository(ProductEntity).delete(id);\n    return id;\n  }\n\n  @Mutation(() => Shirt)\n  async addShirt(@Arg('data') shirtInput: AddShirtInput): Promise<Shirt> {\n    return await getConnection().transaction(async (transactionalEntityManager) => {\n      const product = new ProductEntity();\n      product.name = shirtInput.name;\n      product.type = ProductType.shirt;\n      await transactionalEntityManager.save(product);\n\n      const shirt = new ShirtEntity();\n      shirt.id = product.id;\n      shirt.color = shirtInput.color;\n      shirt.size = shirtInput.size;\n\n      await transactionalEntityManager.save(shirt);\n\n      return {\n        id: product.id,\n        name: product.name,\n        type: ProductType.shirt,\n        color: shirt.color,\n        size: shirt.size,\n      };\n    });\n  }\n\n  @Mutation(() => Pants)\n  async addPants(@Arg('data') pantsInput: AddPantsInput): Promise<Pants> {\n    return await getConnection().transaction(async (transactionalEntityManager) => {\n      const product = new ProductEntity();\n      product.name = pantsInput.name;\n      product.type = ProductType.pants;\n      await transactionalEntityManager.save(product);\n\n      const pants = new PantsEntity();\n      pants.id = product.id;\n      pants.color = pantsInput.color;\n      pants.width = pantsInput.width;\n      pants.length = pantsInput.length;\n\n      await transactionalEntityManager.save(pants);\n\n      return {\n        id: product.id,\n        name: product.name,\n        type: ProductType.pants,\n        color: pants.color,\n        width: pants.width,\n        length: pants.length,\n      };\n    });\n  }\n}\n","import { Min } from 'class-validator';\nimport { Field, Int, ObjectType, registerEnumType } from 'type-graphql';\nimport { ShirtColor } from '../db/entity/ShirtEntity';\nimport { Product } from './Product';\n\nregisterEnumType(ShirtColor, {\n  name: 'ShirtColor',\n});\n\n@ObjectType({ implements: Product })\nexport class Shirt extends Product {\n  @Field(() => ShirtColor)\n  color: ShirtColor;\n\n  @Field(() => Int)\n  @Min(1)\n  size: number;\n}\n","import { GraphQLSchema } from 'graphql';\nimport { buildSchema } from 'type-graphql';\nimport { Pants } from './Pants';\nimport { ProductResolver } from './ProductResolver';\nimport { Shirt } from './Shirt';\n\nexport const createSchema = async (): Promise<GraphQLSchema> => {\n  return await buildSchema({\n    resolvers: [ProductResolver],\n    orphanedTypes: [Shirt, Pants],\n  });\n};\n","import 'reflect-metadata';\nimport { ApolloServer } from 'apollo-server-micro';\nimport { NextApiRequest, NextApiResponse } from 'next';\nimport { createSchema } from 'graphql/schema';\nimport { Connection, createConnection, getConnectionManager } from 'typeorm';\nimport dotenv from 'dotenv';\nimport { ShirtEntity } from 'db/entity/ShirtEntity';\nimport { ProductEntity } from 'db/entity/ProductEntity';\nimport { PantsEntity } from 'db/entity/PantsEntity';\ndotenv.config();\n\nlet apolloServer: ApolloServer;\n\n// eslint-disable-next-line\nlet apolloHandler: (req: any, res: any) => Promise<void>;\n\nlet connection: Connection;\n\nexport const config = {\n  api: {\n    bodyParser: false,\n  },\n};\n\nexport default async (req: NextApiRequest, res: NextApiResponse): Promise<void> => {\n  if (!apolloServer) {\n    const schema = await createSchema();\n    apolloServer = new ApolloServer({ schema });\n    apolloHandler = apolloServer.createHandler({ path: '/api/graphql' });\n  }\n  if (!connection) {\n    const initConnection = async () =>\n      await createConnection({\n        type: 'mysql',\n        host: process.env.DB_HOST,\n        port: parseInt(process.env.DB_PORT),\n        username: process.env.DB_USER,\n        password: process.env.DB_PASSWORD,\n        database: process.env.DB_DATABASE,\n        entities: [ProductEntity, ShirtEntity, PantsEntity],\n      });\n    try {\n      connection = await initConnection();\n    } catch (e) {\n      if (e.name === 'AlreadyHasActiveConnectionError') {\n        connection = getConnectionManager().get('default');\n        await connection.close();\n        connection = await initConnection();\n      } else {\n        throw e;\n      }\n    }\n  }\n  return await apolloHandler(req, res);\n};\n","module.exports = require(\"apollo-server-micro\");","module.exports = require(\"class-validator\");","module.exports = require(\"dotenv\");","module.exports = require(\"reflect-metadata\");","module.exports = require(\"type-graphql\");","module.exports = require(\"typeorm\");"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;ACxFA;AAIA;AAFA;AAAA;AAGA;AAAA;AAIA;AADA;AAMA;AADA;AAMA;AADA;AAKA;AAAA;AACA;AAAA;AApBA;AAAA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AADA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;ACJA;AACA;AACA;AACA;AAGA;AADA;AAAA;AAKA;AAAA;AAIA;AACA;AACA;AAHA;AAPA;AAAA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AADA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;ACNA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;ACLA;AAEA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AACA;AAKA;AAIA;AAFA;AAAA;AAIA;AADA;AAMA;AACA;AACA;AAHA;AAQA;AADA;AAKA;AAAA;AACA;AAAA;AAnBA;AAAA;AACA;AADA;AACA;AADA;AACA;AADA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;ACZA;AACA;AACA;AAGA;AADA;AAAA;AACA;AAAA;AACA;AADA;AACA;AADA;AACA;AADA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;ACLA;AACA;AAEA;AACA;AADA;AAeA;AAVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAWA;AAAA;AACA;AADA;AACA;AADA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAAA;AAAA;AACA;AADA;AACA;AADA;AAAA;AACA;AADA;;;;;;;;;;;;;;;;AAaA;AAAA;AAAA;AACA;AADA;AACA;AADA;AACA;AADA;AAAA;AACA;AADA;;;;;;;;;;;;;;;;;;;;;AAkBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AADA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AACA;AACA;AAzFA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC3CA;AACA;AACA;AACA;AAEA;AACA;AADA;AAKA;AADA;AAAA;AACA;AAAA;AACA;AADA;AACA;AADA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;ACTA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAFA;AAIA;;;;;;;;;;;;ACXA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AADA;AADA;AAMA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;;;;;;;;;;;;;;;;;;;;;;;ACtDA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;A","sourceRoot":""}
{"ast":null,"code":"import 'reflect-metadata';\nimport { ApolloServer, gql } from 'apollo-server-micro';\nconst typeDefs = gql`\n  type Query {\n    products: [Product!]!\n  }\n  type Product {\n    id: Int!\n    name: String\n  }\n`;\nconst resolvers = {\n  Query: {\n    products(parent, args, context) {\n      return [{\n        id: 0,\n        name: 'Nextjs'\n      }];\n    }\n\n  }\n};\nlet apolloServer;\nexport const config = {\n  api: {\n    bodyParser: false\n  }\n};\n\nconst handler = async (req, res) => {\n  if (!apolloServer) {\n    apolloServer = new ApolloServer({\n      typeDefs,\n      resolvers\n    });\n  }\n\n  return apolloServer.createHandler({\n    path: '/api/graphql'\n  });\n};","map":{"version":3,"sources":["/Users/aleksey/Dev/Trash/shopping-cart/pages/api/graphql.ts"],"names":["ApolloServer","gql","typeDefs","resolvers","Query","products","parent","args","context","id","name","apolloServer","config","api","bodyParser","handler","req","res","createHandler","path"],"mappings":"AAAA,OAAO,kBAAP;AACA,SAASA,YAAT,EAAuBC,GAAvB,QAAkC,qBAAlC;AAGA,MAAMC,QAAQ,GAAGD,GAAI;;;;;;;;CAArB;AAUA,MAAME,SAAS,GAAG;AAChBC,EAAAA,KAAK,EAAE;AACLC,IAAAA,QAAQ,CAACC,MAAD,EAASC,IAAT,EAAeC,OAAf,EAAwB;AAC9B,aAAO,CAAC;AAAEC,QAAAA,EAAE,EAAE,CAAN;AAASC,QAAAA,IAAI,EAAE;AAAf,OAAD,CAAP;AACD;;AAHI;AADS,CAAlB;AAQA,IAAIC,YAAJ;AAEA,OAAO,MAAMC,MAAM,GAAG;AACpBC,EAAAA,GAAG,EAAE;AACHC,IAAAA,UAAU,EAAE;AADT;AADe,CAAf;;AAMP,MAAMC,OAAuB,GAAG,OAAOC,GAAP,EAAYC,GAAZ,KAAoB;AAClD,MAAI,CAACN,YAAL,EAAmB;AACjBA,IAAAA,YAAY,GAAG,IAAIX,YAAJ,CAAiB;AAAEE,MAAAA,QAAF;AAAYC,MAAAA;AAAZ,KAAjB,CAAf;AACD;;AACD,SAAOQ,YAAY,CAACO,aAAb,CAA2B;AAAEC,IAAAA,IAAI,EAAE;AAAR,GAA3B,CAAP;AACD,CALD","sourcesContent":["import 'reflect-metadata';\nimport { ApolloServer, gql } from 'apollo-server-micro';\nimport { NextApiHandler } from 'next';\n\nconst typeDefs = gql`\n  type Query {\n    products: [Product!]!\n  }\n  type Product {\n    id: Int!\n    name: String\n  }\n`;\n\nconst resolvers = {\n  Query: {\n    products(parent, args, context) {\n      return [{ id: 0, name: 'Nextjs' }];\n    },\n  },\n};\n\nlet apolloServer: ApolloServer;\n\nexport const config = {\n  api: {\n    bodyParser: false,\n  },\n};\n\nconst handler: NextApiHandler = async (req, res) => {\n  if (!apolloServer) {\n    apolloServer = new ApolloServer({ typeDefs, resolvers });\n  }\n  return apolloServer.createHandler({ path: '/api/graphql' });\n};\n"]},"metadata":{},"sourceType":"module"}
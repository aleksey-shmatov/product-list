{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n  mutation RemoveProduct($id: ID!) {\\n    removeProduct(id: $id)\\n  }\\n\"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  query Products {\\n    products {\\n      id\\n      name\\n      type\\n      ... on Shirt {\\n        shirtColor: color\\n        size\\n      }\\n      ... on Pants {\\n        color\\n        width\\n        length\\n      }\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport { gql, useMutation, useQuery } from '@apollo/client';\nimport { useCallback } from 'react';\nimport { ProductItem } from './ProductItem';\nexport var PRODUCTS_QUERY = gql(_templateObject());\nexport var REMOVE_PRODUCT_MUTATION = gql(_templateObject2());\nexport var ProductList = function ProductList() {\n  var _useQuery = useQuery(PRODUCTS_QUERY, {\n    fetchPolicy: 'cache-only'\n  }),\n      data = _useQuery.data;\n\n  var _useMutation = useMutation(REMOVE_PRODUCT_MUTATION),\n      _useMutation2 = _slicedToArray(_useMutation, 1),\n      removeProduct = _useMutation2[0];\n\n  var handleRemoveProduct = useCallback(function (id) {\n    removeProduct({\n      variables: {\n        id: id\n      },\n      optimisticResponse: {\n        __typename: 'Mutation',\n        removeProduct: id\n      },\n      update: function update(proxy) {\n        var data = proxy.readQuery({\n          query: PRODUCTS_QUERY\n        });\n        proxy.writeQuery({\n          query: PRODUCTS_QUERY,\n          data: _objectSpread({}, data, {\n            products: data.products.filter(function (product) {\n              return product.id !== id;\n            })\n          })\n        });\n      }\n    });\n  }, []);\n  var products = data && data.products;\n  return __jsx(\"ul\", {\n    className: \"product-list\"\n  }, products && products.map(function (product) {\n    return __jsx(ProductItem, {\n      key: product.id,\n      product: product,\n      onRemove: handleRemoveProduct\n    });\n  }));\n};","map":null,"metadata":{},"sourceType":"module"}
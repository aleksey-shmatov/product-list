{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { gql, useMutation, useQuery } from '@apollo/client';\nimport { useCallback } from 'react';\nimport { ProductItem } from './ProductItem';\nexport const PRODUCTS_QUERY = gql`\n  query Products {\n    products {\n      id\n      name\n      type\n      ... on Shirt {\n        shirtColor: color\n        size\n      }\n      ... on Pants {\n        color\n        width\n        length\n      }\n    }\n  }\n`;\nexport const REMOVE_PRODUCT_MUTATION = gql`\n  mutation RemoveProduct($id: ID!) {\n    removeProduct(id: $id)\n  }\n`;\nexport const ProductList = () => {\n  const {\n    data\n  } = useQuery(PRODUCTS_QUERY, {\n    fetchPolicy: 'cache-only'\n  });\n  const [removeProduct] = useMutation(REMOVE_PRODUCT_MUTATION);\n  const handleRemoveProduct = useCallback(id => {\n    removeProduct({\n      variables: {\n        id\n      },\n      optimisticResponse: {\n        __typename: 'Mutation',\n        removeProduct: id\n      },\n      update: proxy => {\n        const data = proxy.readQuery({\n          query: PRODUCTS_QUERY\n        });\n        proxy.writeQuery({\n          query: PRODUCTS_QUERY,\n          data: _objectSpread({}, data, {\n            products: data.products.filter(product => product.id !== id)\n          })\n        });\n      }\n    });\n  }, []);\n  const products = data && data.products;\n  return __jsx(\"ul\", {\n    className: \"product-list\"\n  }, products && products.map(product => __jsx(ProductItem, {\n    key: product.id,\n    product: product,\n    onRemove: handleRemoveProduct\n  })));\n};","map":null,"metadata":{},"sourceType":"module"}
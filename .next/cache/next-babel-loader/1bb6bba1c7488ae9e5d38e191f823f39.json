{"ast":null,"code":"/** All built-in and custom scalars, mapped to their actual values */\nexport let ProductType;\n\n(function (ProductType) {\n  ProductType[\"Pants\"] = \"pants\";\n  ProductType[\"Shirt\"] = \"shirt\";\n})(ProductType || (ProductType = {}));\n\nexport let ShirtColor;\n\n(function (ShirtColor) {\n  ShirtColor[\"Blue\"] = \"blue\";\n  ShirtColor[\"Grey\"] = \"grey\";\n  ShirtColor[\"White\"] = \"white\";\n})(ShirtColor || (ShirtColor = {}));","map":{"version":3,"sources":["/Users/aleksey/Dev/Trash/shopping-cart/generated/index.ts"],"names":["ProductType","ShirtColor"],"mappings":"AAEA;AA4DA,WAAYA,WAAZ;;WAAYA,W;AAAAA,EAAAA,W;AAAAA,EAAAA,W;GAAAA,W,KAAAA,W;;AAmBZ,WAAYC,UAAZ;;WAAYA,U;AAAAA,EAAAA,U;AAAAA,EAAAA,U;AAAAA,EAAAA,U;GAAAA,U,KAAAA,U","sourcesContent":["export type Maybe<T> = T | null;\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: number;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n};\n\nexport type AddPantsInput = {\n  color: Scalars['String'];\n  length: Scalars['Int'];\n  name: Scalars['String'];\n  width: Scalars['Int'];\n};\n\nexport type AddShirtInput = {\n  color: ShirtColor;\n  name: Scalars['String'];\n  size: Scalars['Int'];\n};\n\nexport type Mutation = {\n  __typename?: 'Mutation';\n  addPants: Pants;\n  addShirt: Shirt;\n  removeProduct: Scalars['ID'];\n};\n\n\nexport type MutationAddPantsArgs = {\n  data: AddPantsInput;\n};\n\n\nexport type MutationAddShirtArgs = {\n  data: AddShirtInput;\n};\n\n\nexport type MutationRemoveProductArgs = {\n  id: Scalars['ID'];\n};\n\nexport type Pants = Product & {\n  __typename?: 'Pants';\n  color: Scalars['String'];\n  id: Scalars['ID'];\n  length: Scalars['Int'];\n  name: Scalars['String'];\n  type: ProductType;\n  width: Scalars['Int'];\n};\n\nexport type Product = {\n  id: Scalars['ID'];\n  name: Scalars['String'];\n  type: ProductType;\n};\n\nexport enum ProductType {\n  Pants = 'pants',\n  Shirt = 'shirt'\n}\n\nexport type Query = {\n  __typename?: 'Query';\n  products: Array<Product>;\n};\n\nexport type Shirt = Product & {\n  __typename?: 'Shirt';\n  color: ShirtColor;\n  id: Scalars['ID'];\n  name: Scalars['String'];\n  size: Scalars['Int'];\n  type: ProductType;\n};\n\nexport enum ShirtColor {\n  Blue = 'blue',\n  Grey = 'grey',\n  White = 'white'\n}\n\nexport type AddShirtMutationVariables = Exact<{\n  input: AddShirtInput;\n}>;\n\n\nexport type AddShirtMutation = (\n  { __typename?: 'Mutation' }\n  & { addShirt: (\n    { __typename?: 'Shirt' }\n    & Pick<Shirt, 'id' | 'name' | 'type' | 'color' | 'size'>\n  ) }\n);\n\nexport type ProductsQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type ProductsQuery = (\n  { __typename?: 'Query' }\n  & { products: Array<(\n    { __typename?: 'Pants' }\n    & Pick<Pants, 'color' | 'width' | 'length' | 'id' | 'name' | 'type'>\n  ) | (\n    { __typename?: 'Shirt' }\n    & Pick<Shirt, 'size' | 'id' | 'name' | 'type'>\n    & { shirtColor: Shirt['color'] }\n  )> }\n);\n\nexport type RemoveProductMutationVariables = Exact<{\n  id: Scalars['ID'];\n}>;\n\n\nexport type RemoveProductMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'removeProduct'>\n);\n"]},"metadata":{},"sourceType":"module"}
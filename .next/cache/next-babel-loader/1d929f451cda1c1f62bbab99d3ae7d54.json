{"ast":null,"code":"import 'reflect-metadata';\nimport { ApolloServer } from 'apollo-server-micro';\nimport { createSchema } from 'graphql/schema';\nimport { createConnection } from 'typeorm';\nimport dotenv from 'dotenv';\ndotenv.config();\nlet apolloServer; // eslint-disable-next-line\n\nlet apolloHandler;\nexport const config = {\n  api: {\n    bodyParser: false\n  }\n};\nexport default (async (req, res) => {\n  if (!apolloServer) {\n    await createConnection({\n      type: 'mysql',\n      host: process.env.DB_HOST,\n      port: parseInt(process.env.DB_PORT),\n      username: process.env.DB_USER,\n      password: process.env.DB_PASSWORD,\n      database: process.env.DB_DATABASE\n    });\n    const schema = await createSchema();\n    apolloServer = new ApolloServer({\n      schema\n    });\n    apolloHandler = apolloServer.createHandler({\n      path: '/api/graphql'\n    });\n  }\n\n  return await apolloHandler(req, res);\n});","map":{"version":3,"sources":["/Users/aleksey/Dev/Trash/shopping-cart/pages/api/graphql.ts"],"names":["ApolloServer","createSchema","createConnection","dotenv","config","apolloServer","apolloHandler","api","bodyParser","req","res","type","host","process","env","DB_HOST","port","parseInt","DB_PORT","username","DB_USER","password","DB_PASSWORD","database","DB_DATABASE","schema","createHandler","path"],"mappings":"AAAA,OAAO,kBAAP;AACA,SAASA,YAAT,QAA6B,qBAA7B;AAEA,SAASC,YAAT,QAA6B,gBAA7B;AACA,SAASC,gBAAT,QAAiC,SAAjC;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACAA,MAAM,CAACC,MAAP;AAEA,IAAIC,YAAJ,C,CAEA;;AACA,IAAIC,aAAJ;AAEA,OAAO,MAAMF,MAAM,GAAG;AACpBG,EAAAA,GAAG,EAAE;AACHC,IAAAA,UAAU,EAAE;AADT;AADe,CAAf;AAMP,gBAAe,OAAOC,GAAP,EAA4BC,GAA5B,KAAoE;AACjF,MAAI,CAACL,YAAL,EAAmB;AACjB,UAAMH,gBAAgB,CAAC;AACrBS,MAAAA,IAAI,EAAE,OADe;AAErBC,MAAAA,IAAI,EAAEC,OAAO,CAACC,GAAR,CAAYC,OAFG;AAGrBC,MAAAA,IAAI,EAAEC,QAAQ,CAACJ,OAAO,CAACC,GAAR,CAAYI,OAAb,CAHO;AAIrBC,MAAAA,QAAQ,EAAEN,OAAO,CAACC,GAAR,CAAYM,OAJD;AAKrBC,MAAAA,QAAQ,EAAER,OAAO,CAACC,GAAR,CAAYQ,WALD;AAMrBC,MAAAA,QAAQ,EAAEV,OAAO,CAACC,GAAR,CAAYU;AAND,KAAD,CAAtB;AAQA,UAAMC,MAAM,GAAG,MAAMxB,YAAY,EAAjC;AACAI,IAAAA,YAAY,GAAG,IAAIL,YAAJ,CAAiB;AAAEyB,MAAAA;AAAF,KAAjB,CAAf;AACAnB,IAAAA,aAAa,GAAGD,YAAY,CAACqB,aAAb,CAA2B;AAAEC,MAAAA,IAAI,EAAE;AAAR,KAA3B,CAAhB;AACD;;AACD,SAAO,MAAMrB,aAAa,CAACG,GAAD,EAAMC,GAAN,CAA1B;AACD,CAfD","sourcesContent":["import 'reflect-metadata';\nimport { ApolloServer } from 'apollo-server-micro';\nimport { NextApiRequest, NextApiResponse } from 'next';\nimport { createSchema } from 'graphql/schema';\nimport { createConnection } from 'typeorm';\nimport dotenv from 'dotenv';\ndotenv.config();\n\nlet apolloServer: ApolloServer;\n\n// eslint-disable-next-line\nlet apolloHandler: (req: any, res: any) => Promise<void>;\n\nexport const config = {\n  api: {\n    bodyParser: false,\n  },\n};\n\nexport default async (req: NextApiRequest, res: NextApiResponse): Promise<void> => {\n  if (!apolloServer) {\n    await createConnection({\n      type: 'mysql',\n      host: process.env.DB_HOST,\n      port: parseInt(process.env.DB_PORT),\n      username: process.env.DB_USER,\n      password: process.env.DB_PASSWORD,\n      database: process.env.DB_DATABASE,\n    });\n    const schema = await createSchema();\n    apolloServer = new ApolloServer({ schema });\n    apolloHandler = apolloServer.createHandler({ path: '/api/graphql' });\n  }\n  return await apolloHandler(req, res);\n};\n"]},"metadata":{},"sourceType":"module"}
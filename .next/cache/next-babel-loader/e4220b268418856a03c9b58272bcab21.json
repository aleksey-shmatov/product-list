{"ast":null,"code":"import 'reflect-metadata';\nimport { ApolloServer } from 'apollo-server-micro';\nimport { createSchema } from 'graphql/schema';\nimport { createConnection } from 'typeorm';\nimport * as ormConfig from 'ormconfig';\nlet apolloServer; // eslint-disable-next-line\n\nlet apolloHandler;\nexport const config = {\n  api: {\n    bodyParser: false\n  }\n};\nexport default (async (req, res) => {\n  if (!apolloServer) {\n    await createConnection(ormConfig);\n    const schema = await createSchema();\n    apolloServer = new ApolloServer({\n      schema\n    });\n    apolloHandler = apolloServer.createHandler({\n      path: '/api/graphql'\n    });\n  }\n\n  return await apolloHandler(req, res);\n});","map":{"version":3,"sources":["/Users/aleksey/Dev/Trash/shopping-cart/pages/api/graphql.ts"],"names":["ApolloServer","createSchema","createConnection","ormConfig","apolloServer","apolloHandler","config","api","bodyParser","req","res","schema","createHandler","path"],"mappings":"AAAA,OAAO,kBAAP;AACA,SAASA,YAAT,QAA6B,qBAA7B;AAEA,SAASC,YAAT,QAA6B,gBAA7B;AACA,SAA4BC,gBAA5B,QAAoD,SAApD;AACA,OAAO,KAAKC,SAAZ,MAA2B,WAA3B;AAEA,IAAIC,YAAJ,C,CAEA;;AACA,IAAIC,aAAJ;AAEA,OAAO,MAAMC,MAAM,GAAG;AACpBC,EAAAA,GAAG,EAAE;AACHC,IAAAA,UAAU,EAAE;AADT;AADe,CAAf;AAMP,gBAAe,OAAOC,GAAP,EAA4BC,GAA5B,KAAoE;AACjF,MAAI,CAACN,YAAL,EAAmB;AACjB,UAAMF,gBAAgB,CAACC,SAAD,CAAtB;AACA,UAAMQ,MAAM,GAAG,MAAMV,YAAY,EAAjC;AACAG,IAAAA,YAAY,GAAG,IAAIJ,YAAJ,CAAiB;AAAEW,MAAAA;AAAF,KAAjB,CAAf;AACAN,IAAAA,aAAa,GAAGD,YAAY,CAACQ,aAAb,CAA2B;AAAEC,MAAAA,IAAI,EAAE;AAAR,KAA3B,CAAhB;AACD;;AACD,SAAO,MAAMR,aAAa,CAACI,GAAD,EAAMC,GAAN,CAA1B;AACD,CARD","sourcesContent":["import 'reflect-metadata';\nimport { ApolloServer } from 'apollo-server-micro';\nimport { NextApiRequest, NextApiResponse } from 'next';\nimport { createSchema } from 'graphql/schema';\nimport { ConnectionOptions, createConnection } from 'typeorm';\nimport * as ormConfig from 'ormconfig';\n\nlet apolloServer: ApolloServer;\n\n// eslint-disable-next-line\nlet apolloHandler: (req: any, res: any) => Promise<void>;\n\nexport const config = {\n  api: {\n    bodyParser: false,\n  },\n};\n\nexport default async (req: NextApiRequest, res: NextApiResponse): Promise<void> => {\n  if (!apolloServer) {\n    await createConnection(ormConfig as ConnectionOptions);\n    const schema = await createSchema();\n    apolloServer = new ApolloServer({ schema });\n    apolloHandler = apolloServer.createHandler({ path: '/api/graphql' });\n  }\n  return await apolloHandler(req, res);\n};\n"]},"metadata":{},"sourceType":"module"}
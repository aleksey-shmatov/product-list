{"ast":null,"code":"import 'reflect-metadata';\nimport { ApolloServer } from 'apollo-server-micro';\nimport { createSchema } from 'graphql/schema';\nimport { createConnection, getConnectionManager } from 'typeorm';\nimport dotenv from 'dotenv';\nimport { ShirtEntity } from 'db/entity/ShirtEntity';\nimport { ProductEntity } from 'db/entity/ProductEntity';\nimport { PantsEntity } from 'db/entity/PantsEntity';\ndotenv.config();\nlet apolloServer; // eslint-disable-next-line\n\nlet apolloHandler;\nlet connection;\nexport const config = {\n  api: {\n    bodyParser: false\n  }\n};\nexport default (async (req, res) => {\n  if (!apolloServer) {\n    const schema = await createSchema();\n    apolloServer = new ApolloServer({\n      schema\n    });\n    apolloHandler = apolloServer.createHandler({\n      path: '/api/graphql'\n    });\n  }\n\n  if (!connection) {\n    try {\n      connection = await createConnection({\n        type: 'mysql',\n        host: process.env.DB_HOST,\n        port: parseInt(process.env.DB_PORT),\n        username: process.env.DB_USER,\n        password: process.env.DB_PASSWORD,\n        database: process.env.DB_DATABASE,\n        entities: [ProductEntity, ShirtEntity, PantsEntity]\n      });\n    } catch (e) {\n      if (e.name === 'AlreadyHasActiveConnectionError') {\n        connection = getConnectionManager().get('default');\n      } else {\n        throw e;\n      }\n    }\n  }\n\n  return await apolloHandler(req, res);\n});","map":{"version":3,"sources":["/Users/aleksey/Dev/Trash/shopping-cart/pages/api/graphql.ts"],"names":["ApolloServer","createSchema","createConnection","getConnectionManager","dotenv","ShirtEntity","ProductEntity","PantsEntity","config","apolloServer","apolloHandler","connection","api","bodyParser","req","res","schema","createHandler","path","type","host","process","env","DB_HOST","port","parseInt","DB_PORT","username","DB_USER","password","DB_PASSWORD","database","DB_DATABASE","entities","e","name","get"],"mappings":"AAAA,OAAO,kBAAP;AACA,SAASA,YAAT,QAA6B,qBAA7B;AAEA,SAASC,YAAT,QAA6B,gBAA7B;AACA,SAAqBC,gBAArB,EAAuCC,oBAAvC,QAAmE,SAAnE;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,SAASC,WAAT,QAA4B,uBAA5B;AACA,SAASC,aAAT,QAA8B,yBAA9B;AACA,SAASC,WAAT,QAA4B,uBAA5B;AACAH,MAAM,CAACI,MAAP;AAEA,IAAIC,YAAJ,C,CAEA;;AACA,IAAIC,aAAJ;AAEA,IAAIC,UAAJ;AAEA,OAAO,MAAMH,MAAM,GAAG;AACpBI,EAAAA,GAAG,EAAE;AACHC,IAAAA,UAAU,EAAE;AADT;AADe,CAAf;AAMP,gBAAe,OAAOC,GAAP,EAA4BC,GAA5B,KAAoE;AACjF,MAAI,CAACN,YAAL,EAAmB;AACjB,UAAMO,MAAM,GAAG,MAAMf,YAAY,EAAjC;AACAQ,IAAAA,YAAY,GAAG,IAAIT,YAAJ,CAAiB;AAAEgB,MAAAA;AAAF,KAAjB,CAAf;AACAN,IAAAA,aAAa,GAAGD,YAAY,CAACQ,aAAb,CAA2B;AAAEC,MAAAA,IAAI,EAAE;AAAR,KAA3B,CAAhB;AACD;;AACD,MAAI,CAACP,UAAL,EAAiB;AACf,QAAI;AACFA,MAAAA,UAAU,GAAG,MAAMT,gBAAgB,CAAC;AAClCiB,QAAAA,IAAI,EAAE,OAD4B;AAElCC,QAAAA,IAAI,EAAEC,OAAO,CAACC,GAAR,CAAYC,OAFgB;AAGlCC,QAAAA,IAAI,EAAEC,QAAQ,CAACJ,OAAO,CAACC,GAAR,CAAYI,OAAb,CAHoB;AAIlCC,QAAAA,QAAQ,EAAEN,OAAO,CAACC,GAAR,CAAYM,OAJY;AAKlCC,QAAAA,QAAQ,EAAER,OAAO,CAACC,GAAR,CAAYQ,WALY;AAMlCC,QAAAA,QAAQ,EAAEV,OAAO,CAACC,GAAR,CAAYU,WANY;AAOlCC,QAAAA,QAAQ,EAAE,CAAC3B,aAAD,EAAgBD,WAAhB,EAA6BE,WAA7B;AAPwB,OAAD,CAAnC;AASD,KAVD,CAUE,OAAO2B,CAAP,EAAU;AACV,UAAIA,CAAC,CAACC,IAAF,KAAW,iCAAf,EAAkD;AAChDxB,QAAAA,UAAU,GAAGR,oBAAoB,GAAGiC,GAAvB,CAA2B,SAA3B,CAAb;AACD,OAFD,MAEO;AACL,cAAMF,CAAN;AACD;AACF;AACF;;AACD,SAAO,MAAMxB,aAAa,CAACI,GAAD,EAAMC,GAAN,CAA1B;AACD,CA1BD","sourcesContent":["import 'reflect-metadata';\nimport { ApolloServer } from 'apollo-server-micro';\nimport { NextApiRequest, NextApiResponse } from 'next';\nimport { createSchema } from 'graphql/schema';\nimport { Connection, createConnection, getConnectionManager } from 'typeorm';\nimport dotenv from 'dotenv';\nimport { ShirtEntity } from 'db/entity/ShirtEntity';\nimport { ProductEntity } from 'db/entity/ProductEntity';\nimport { PantsEntity } from 'db/entity/PantsEntity';\ndotenv.config();\n\nlet apolloServer: ApolloServer;\n\n// eslint-disable-next-line\nlet apolloHandler: (req: any, res: any) => Promise<void>;\n\nlet connection: Connection;\n\nexport const config = {\n  api: {\n    bodyParser: false,\n  },\n};\n\nexport default async (req: NextApiRequest, res: NextApiResponse): Promise<void> => {\n  if (!apolloServer) {\n    const schema = await createSchema();\n    apolloServer = new ApolloServer({ schema });\n    apolloHandler = apolloServer.createHandler({ path: '/api/graphql' });\n  }\n  if (!connection) {\n    try {\n      connection = await createConnection({\n        type: 'mysql',\n        host: process.env.DB_HOST,\n        port: parseInt(process.env.DB_PORT),\n        username: process.env.DB_USER,\n        password: process.env.DB_PASSWORD,\n        database: process.env.DB_DATABASE,\n        entities: [ProductEntity, ShirtEntity, PantsEntity],\n      });\n    } catch (e) {\n      if (e.name === 'AlreadyHasActiveConnectionError') {\n        connection = getConnectionManager().get('default');\n      } else {\n        throw e;\n      }\n    }\n  }\n  return await apolloHandler(req, res);\n};\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"/Users/aleksey/Dev/Trash/shopping-cart/components/ProductList/ProductList.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { gql, useMutation, useQuery } from '@apollo/client';\nimport { useCallback } from 'react';\nimport { ProductItem } from './ProductItem';\nexport const PRODUCTS_QUERY = gql`\n  query Products {\n    products {\n      id\n      name\n      type\n      ... on Shirt {\n        shirtColor: color\n        size\n      }\n      ... on Pants {\n        color\n        width\n        length\n      }\n    }\n  }\n`;\nexport const REMOVE_PRODUCT_MUTATION = gql`\n  mutation RemoveProduct($id: ID!) {\n    removeProduct(id: $id)\n  }\n`;\nexport const ProductList = () => {\n  const {\n    data\n  } = useQuery(PRODUCTS_QUERY, {\n    fetchPolicy: 'cache-only'\n  });\n  const [removeProduct] = useMutation(REMOVE_PRODUCT_MUTATION);\n  const handleRemoveProduct = useCallback(id => {\n    removeProduct({\n      variables: {\n        id\n      },\n      optimisticResponse: {\n        __typename: 'Mutation',\n        removeProduct: id\n      },\n      update: proxy => {\n        const data = proxy.readQuery({\n          query: PRODUCTS_QUERY\n        });\n        proxy.writeQuery({\n          query: PRODUCTS_QUERY,\n          data: _objectSpread({}, data, {\n            products: data.products.filter(product => product.id !== id)\n          })\n        });\n      }\n    });\n  }, []);\n  const products = data && data.products;\n  return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 5\n    }\n  }, __jsx(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }\n  }, products && products.map(product => __jsx(ProductItem, {\n    key: product.id,\n    product: product,\n    onRemove: handleRemoveProduct,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }\n  }))));\n};","map":{"version":3,"sources":["/Users/aleksey/Dev/Trash/shopping-cart/components/ProductList/ProductList.tsx"],"names":["gql","useMutation","useQuery","useCallback","ProductItem","PRODUCTS_QUERY","REMOVE_PRODUCT_MUTATION","ProductList","data","fetchPolicy","removeProduct","handleRemoveProduct","id","variables","optimisticResponse","__typename","update","proxy","readQuery","query","writeQuery","products","filter","product","map"],"mappings":";;;;;;;;;;AAAA,SAASA,GAAT,EAAcC,WAAd,EAA2BC,QAA3B,QAA2C,gBAA3C;AAEA,SAASC,WAAT,QAA4B,OAA5B;AACA,SAASC,WAAT,QAA4B,eAA5B;AAEA,OAAO,MAAMC,cAAc,GAAGL,GAAI;;;;;;;;;;;;;;;;;CAA3B;AAmBP,OAAO,MAAMM,uBAAuB,GAAGN,GAAI;;;;CAApC;AAMP,OAAO,MAAMO,WAAoC,GAAG,MAAM;AACxD,QAAM;AAAEC,IAAAA;AAAF,MAAWN,QAAQ,CAAgBG,cAAhB,EAAgC;AACvDI,IAAAA,WAAW,EAAE;AAD0C,GAAhC,CAAzB;AAGA,QAAM,CAACC,aAAD,IAAkBT,WAAW,CAAwBK,uBAAxB,CAAnC;AACA,QAAMK,mBAAmB,GAAGR,WAAW,CAAES,EAAD,IAAgB;AACtDF,IAAAA,aAAa,CAAC;AACZG,MAAAA,SAAS,EAAE;AACTD,QAAAA;AADS,OADC;AAIZE,MAAAA,kBAAkB,EAAE;AAClBC,QAAAA,UAAU,EAAE,UADM;AAElBL,QAAAA,aAAa,EAAEE;AAFG,OAJR;AAQZI,MAAAA,MAAM,EAAGC,KAAD,IAAW;AACjB,cAAMT,IAAI,GAAGS,KAAK,CAACC,SAAN,CAAgB;AAAEC,UAAAA,KAAK,EAAEd;AAAT,SAAhB,CAAb;AACAY,QAAAA,KAAK,CAACG,UAAN,CAAiB;AACfD,UAAAA,KAAK,EAAEd,cADQ;AAEfG,UAAAA,IAAI,oBACCA,IADD;AAEFa,YAAAA,QAAQ,EAAEb,IAAI,CAACa,QAAL,CAAcC,MAAd,CAAsBC,OAAD,IAAaA,OAAO,CAACX,EAAR,KAAeA,EAAjD;AAFR;AAFW,SAAjB;AAOD;AAjBW,KAAD,CAAb;AAmBD,GApBsC,EAoBpC,EApBoC,CAAvC;AAqBA,QAAMS,QAAQ,GAAGb,IAAI,IAAIA,IAAI,CAACa,QAA9B;AACA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGA,QAAQ,IACPA,QAAQ,CAACG,GAAT,CAAcD,OAAD,IACX,MAAC,WAAD;AAAa,IAAA,GAAG,EAAEA,OAAO,CAACX,EAA1B;AAA8B,IAAA,OAAO,EAAEW,OAAvC;AAAgD,IAAA,QAAQ,EAAEZ,mBAA1D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CAFJ,CADF,CADF;AAUD,CArCM","sourcesContent":["import { gql, useMutation, useQuery } from '@apollo/client';\nimport { ProductsQuery, RemoveProductMutation } from 'generated';\nimport { useCallback } from 'react';\nimport { ProductItem } from './ProductItem';\n\nexport const PRODUCTS_QUERY = gql`\n  query Products {\n    products {\n      id\n      name\n      type\n      ... on Shirt {\n        shirtColor: color\n        size\n      }\n      ... on Pants {\n        color\n        width\n        length\n      }\n    }\n  }\n`;\n\nexport const REMOVE_PRODUCT_MUTATION = gql`\n  mutation RemoveProduct($id: ID!) {\n    removeProduct(id: $id)\n  }\n`;\n\nexport const ProductList: React.FunctionComponent = () => {\n  const { data } = useQuery<ProductsQuery>(PRODUCTS_QUERY, {\n    fetchPolicy: 'cache-only',\n  });\n  const [removeProduct] = useMutation<RemoveProductMutation>(REMOVE_PRODUCT_MUTATION);\n  const handleRemoveProduct = useCallback((id: number) => {\n    removeProduct({\n      variables: {\n        id,\n      },\n      optimisticResponse: {\n        __typename: 'Mutation',\n        removeProduct: id,\n      },\n      update: (proxy) => {\n        const data = proxy.readQuery({ query: PRODUCTS_QUERY });\n        proxy.writeQuery({\n          query: PRODUCTS_QUERY,\n          data: {\n            ...data,\n            products: data.products.filter((product) => product.id !== id),\n          },\n        });\n      },\n    });\n  }, []);\n  const products = data && data.products;\n  return (\n    <div>\n      <ul>\n        {products &&\n          products.map((product) => (\n            <ProductItem key={product.id} product={product} onRemove={handleRemoveProduct}></ProductItem>\n          ))}\n      </ul>\n    </div>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}
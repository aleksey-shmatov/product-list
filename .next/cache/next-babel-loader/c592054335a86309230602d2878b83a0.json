{"ast":null,"code":"var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _class, _class2, _descriptor, _descriptor2, _descriptor3, _temp;\n\nfunction _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }\n\nfunction _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }\n\nfunction _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }\n\nimport { ProductType } from 'db/entity/ProductType';\nimport { Field, ID, InterfaceType, registerEnumType } from 'type-graphql';\nimport { Pants } from './Pants';\nimport { Shirt } from './Shirt';\nregisterEnumType(ProductType, {\n  name: 'ProductType'\n});\nexport let Product = (_dec = InterfaceType({\n  resolveType: value => {\n    if (value.type === 'shirt') {\n      return Shirt;\n    } else if (value.type === 'pants') {\n      return Pants;\n    } else {\n      throw new Error(`Unknown entity type: ${value.type}`);\n    }\n  }\n}), _dec2 = Field(() => ID), _dec3 = Reflect.metadata(\"design:type\", Number), _dec4 = Field(), _dec5 = Reflect.metadata(\"design:type\", String), _dec6 = Field(() => ProductType), _dec7 = Reflect.metadata(\"design:type\", typeof ProductType === \"undefined\" ? Object : ProductType), _dec(_class = (_class2 = (_temp = class Product {\n  constructor() {\n    _initializerDefineProperty(this, \"id\", _descriptor, this);\n\n    _initializerDefineProperty(this, \"name\", _descriptor2, this);\n\n    _initializerDefineProperty(this, \"type\", _descriptor3, this);\n  }\n\n}, _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, \"id\", [_dec2, _dec3], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, \"name\", [_dec4, _dec5], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, \"type\", [_dec6, _dec7], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n})), _class2)) || _class);","map":{"version":3,"sources":["/Users/aleksey/Dev/Trash/shopping-cart/graphql/Product.ts"],"names":["ProductType","Field","ID","InterfaceType","registerEnumType","Pants","Shirt","name","Product","resolveType","value","type","Error"],"mappings":";;;;;;;;AAAA,SAASA,WAAT,QAA4B,uBAA5B;AACA,SAASC,KAAT,EAAgBC,EAAhB,EAAoBC,aAApB,EAAmCC,gBAAnC,QAA2D,cAA3D;AACA,SAASC,KAAT,QAAsB,SAAtB;AACA,SAASC,KAAT,QAAsB,SAAtB;AAEAF,gBAAgB,CAACJ,WAAD,EAAc;AAC5BO,EAAAA,IAAI,EAAE;AADsB,CAAd,CAAhB;AAeA,WAAsBC,OAAtB,WAXCL,aAAa,CAAC;AACbM,EAAAA,WAAW,EAAGC,KAAD,IAAW;AACtB,QAAIA,KAAK,CAACC,IAAN,KAAe,OAAnB,EAA4B;AAC1B,aAAOL,KAAP;AACD,KAFD,MAEO,IAAII,KAAK,CAACC,IAAN,KAAe,OAAnB,EAA4B;AACjC,aAAON,KAAP;AACD,KAFM,MAEA;AACL,YAAM,IAAIO,KAAJ,CAAW,wBAAuBF,KAAK,CAACC,IAAK,EAA7C,CAAN;AACD;AACF;AATY,CAAD,CAWd,UACGV,KAAK,CAAC,MAAMC,EAAP,CADR,2DAIGD,KAAK,EAJR,2DAOGA,KAAK,CAAC,MAAMD,WAAP,CAPR,wIAXA,MAWsBQ,OAXtB,CAW8B;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA,CAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { ProductType } from 'db/entity/ProductType';\nimport { Field, ID, InterfaceType, registerEnumType } from 'type-graphql';\nimport { Pants } from './Pants';\nimport { Shirt } from './Shirt';\n\nregisterEnumType(ProductType, {\n  name: 'ProductType',\n});\n\n@InterfaceType({\n  resolveType: (value) => {\n    if (value.type === 'shirt') {\n      return Shirt;\n    } else if (value.type === 'pants') {\n      return Pants;\n    } else {\n      throw new Error(`Unknown entity type: ${value.type}`);\n    }\n  },\n})\nexport abstract class Product {\n  @Field(() => ID)\n  id: number;\n\n  @Field()\n  name: string;\n\n  @Field(() => ProductType)\n  type: ProductType;\n}\n"]},"metadata":{},"sourceType":"module"}
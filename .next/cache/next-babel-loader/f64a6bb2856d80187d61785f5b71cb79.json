{"ast":null,"code":"import 'reflect-metadata';\nimport { ApolloServer } from 'apollo-server-micro';\nimport { createSchema } from 'graphql/schema';\nimport { createConnection, getConnectionManager } from 'typeorm';\nimport dotenv from 'dotenv';\nimport { ShirtEntity } from 'db/entity/ShirtEntity';\nimport { ProductEntity } from 'db/entity/ProductEntity';\nimport { PantsEntity } from 'db/entity/PantsEntity';\ndotenv.config();\nlet apolloServer; // eslint-disable-next-line\n\nlet apolloHandler;\nlet connection;\nexport const config = {\n  api: {\n    bodyParser: false\n  }\n};\nexport default (async (req, res) => {\n  if (!apolloServer) {\n    const schema = await createSchema();\n    apolloServer = new ApolloServer({\n      schema\n    });\n    apolloHandler = apolloServer.createHandler({\n      path: '/api/graphql'\n    });\n  }\n\n  if (!connection) {\n    const initConnection = async () => await createConnection({\n      type: 'mysql',\n      host: process.env.DB_HOST,\n      port: parseInt(process.env.DB_PORT),\n      username: process.env.DB_USER,\n      password: process.env.DB_PASSWORD,\n      database: process.env.DB_DATABASE,\n      entities: [ProductEntity, ShirtEntity, PantsEntity]\n    });\n\n    try {\n      connection = await initConnection();\n    } catch (e) {\n      if (e.name === 'AlreadyHasActiveConnectionError') {\n        connection = getConnectionManager().get('default');\n        await connection.close();\n        connection = await initConnection();\n      } else {\n        throw e;\n      }\n    }\n  }\n\n  return await apolloHandler(req, res);\n});","map":null,"metadata":{},"sourceType":"module"}
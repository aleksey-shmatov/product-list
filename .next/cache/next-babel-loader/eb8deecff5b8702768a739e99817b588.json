{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useMemo } from 'react';\nimport { ApolloClient, HttpLink, InMemoryCache } from '@apollo/client';\nimport fetch from 'cross-fetch';\nlet apolloClient;\n\nfunction createApolloClient() {\n  return new ApolloClient({\n    ssrMode: true,\n    link: new HttpLink({\n      uri: 'http://localhost:3000/api/graphql',\n      credentials: 'same-origin',\n      fetch\n    }),\n    cache: new InMemoryCache({})\n  });\n}\n\nexport function initializeApollo(initialState = null) {\n  var _apolloClient2;\n\n  const _apolloClient = (_apolloClient2 = apolloClient) !== null && _apolloClient2 !== void 0 ? _apolloClient2 : createApolloClient();\n\n  if (initialState) {\n    const existingCache = _apolloClient.extract(); // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\n    _apolloClient.cache.restore(_objectSpread({}, existingCache, {}, initialState));\n  } // For SSG and SSR always create a new Apollo Client\n\n\n  if (true) return _apolloClient; // Create the Apollo Client once in the client\n\n  if (!apolloClient) apolloClient = _apolloClient;\n  return _apolloClient;\n}\nexport function useApollo(initialState) {\n  const store = useMemo(() => initializeApollo(initialState), [initialState]);\n  return store;\n}","map":{"version":3,"sources":["/Users/aleksey/Dev/Trash/shopping-cart/lib/apolloClient.ts"],"names":["useMemo","ApolloClient","HttpLink","InMemoryCache","fetch","apolloClient","createApolloClient","ssrMode","link","uri","credentials","cache","initializeApollo","initialState","_apolloClient","existingCache","extract","restore","useApollo","store"],"mappings":";;;;;;AAAA,SAASA,OAAT,QAAwB,OAAxB;AACA,SAASC,YAAT,EAAuBC,QAAvB,EAAiCC,aAAjC,QAA6E,gBAA7E;AACA,OAAOC,KAAP,MAAkB,aAAlB;AAEA,IAAIC,YAAJ;;AAEA,SAASC,kBAAT,GAA8B;AAC5B,SAAO,IAAIL,YAAJ,CAAiB;AACtBM,IAAAA,OAAO,MADe;AAEtBC,IAAAA,IAAI,EAAE,IAAIN,QAAJ,CAAa;AACjBO,MAAAA,GAAG,EAAE,mCADY;AAEjBC,MAAAA,WAAW,EAAE,aAFI;AAGjBN,MAAAA;AAHiB,KAAb,CAFgB;AAOtBO,IAAAA,KAAK,EAAE,IAAIR,aAAJ,CAAkB,EAAlB;AAPe,GAAjB,CAAP;AASD;;AAED,OAAO,SAASS,gBAAT,CAA0BC,YAAqB,GAAG,IAAlD,EAA6F;AAAA;;AAClG,QAAMC,aAAa,qBAAGT,YAAH,2DAAmBC,kBAAkB,EAAxD;;AACA,MAAIO,YAAJ,EAAkB;AAChB,UAAME,aAAa,GAAGD,aAAa,CAACE,OAAd,EAAtB,CADgB,CAEhB;;;AACAF,IAAAA,aAAa,CAACH,KAAd,CAAoBM,OAApB,mBAAiCF,aAAjC,MAAoDF,YAApD;AACD,GANiG,CAOlG;;;AACA,YAAmC,OAAOC,aAAP,CAR+D,CASlG;;AACA,MAAI,CAACT,YAAL,EAAmBA,YAAY,GAAGS,aAAf;AACnB,SAAOA,aAAP;AACD;AAED,OAAO,SAASI,SAAT,CAAmBL,YAAnB,EAA+E;AACpF,QAAMM,KAAK,GAAGnB,OAAO,CAAC,MAAMY,gBAAgB,CAACC,YAAD,CAAvB,EAAuC,CAACA,YAAD,CAAvC,CAArB;AACA,SAAOM,KAAP;AACD","sourcesContent":["import { useMemo } from 'react';\nimport { ApolloClient, HttpLink, InMemoryCache, NormalizedCacheObject } from '@apollo/client';\nimport fetch from 'cross-fetch';\n\nlet apolloClient: ApolloClient<NormalizedCacheObject>;\n\nfunction createApolloClient() {\n  return new ApolloClient({\n    ssrMode: typeof window === 'undefined',\n    link: new HttpLink({\n      uri: 'http://localhost:3000/api/graphql',\n      credentials: 'same-origin',\n      fetch,\n    }),\n    cache: new InMemoryCache({}),\n  });\n}\n\nexport function initializeApollo(initialState: unknown = null): ApolloClient<NormalizedCacheObject> {\n  const _apolloClient = apolloClient ?? createApolloClient();\n  if (initialState) {\n    const existingCache = _apolloClient.extract();\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    _apolloClient.cache.restore({ ...existingCache, ...(initialState as any) });\n  }\n  // For SSG and SSR always create a new Apollo Client\n  if (typeof window === 'undefined') return _apolloClient;\n  // Create the Apollo Client once in the client\n  if (!apolloClient) apolloClient = _apolloClient;\n  return _apolloClient;\n}\n\nexport function useApollo(initialState: unknown): ApolloClient<NormalizedCacheObject> {\n  const store = useMemo(() => initializeApollo(initialState), [initialState]);\n  return store;\n}\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/aleksey/Dev/Trash/shopping-cart/components/ProductList/ProductList.tsx\";\n\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n  mutation RemoveProduct($id: ID!) {\\n    removeProduct(id: $id)\\n  }\\n\"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  query Products {\\n    products {\\n      id\\n      name\\n      type\\n      ... on Shirt {\\n        shirtColor: color\\n        size\\n      }\\n      ... on Pants {\\n        color\\n        width\\n        length\\n      }\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport { gql, useMutation, useQuery } from '@apollo/client';\nimport { useCallback } from 'react';\nimport { ProductItem } from './ProductItem';\nexport var PRODUCTS_QUERY = gql(_templateObject());\nexport var REMOVE_PRODUCT_MUTATION = gql(_templateObject2());\nexport var ProductList = function ProductList() {\n  var _useQuery = useQuery(PRODUCTS_QUERY, {\n    fetchPolicy: 'cache-only'\n  }),\n      data = _useQuery.data;\n\n  var _useMutation = useMutation(REMOVE_PRODUCT_MUTATION),\n      _useMutation2 = _slicedToArray(_useMutation, 1),\n      removeProduct = _useMutation2[0];\n\n  var handleRemoveProduct = useCallback(function (id) {\n    removeProduct({\n      variables: {\n        id: id\n      },\n      optimisticResponse: {\n        __typename: 'Mutation',\n        removeProduct: id\n      },\n      update: function update(proxy) {\n        var data = proxy.readQuery({\n          query: PRODUCTS_QUERY\n        });\n        proxy.writeQuery({\n          query: PRODUCTS_QUERY,\n          data: _objectSpread({}, data, {\n            products: data.products.filter(function (product) {\n              return product.id !== id;\n            })\n          })\n        });\n      }\n    });\n  }, []);\n  var products = data && data.products;\n  return __jsx(\"ul\", {\n    className: \"product-list\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 5\n    }\n  }, products && products.map(function (product) {\n    return __jsx(ProductItem, {\n      key: product.id,\n      product: product,\n      onRemove: handleRemoveProduct,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 11\n      }\n    });\n  }));\n};","map":{"version":3,"sources":["/Users/aleksey/Dev/Trash/shopping-cart/components/ProductList/ProductList.tsx"],"names":["gql","useMutation","useQuery","useCallback","ProductItem","PRODUCTS_QUERY","REMOVE_PRODUCT_MUTATION","ProductList","fetchPolicy","data","removeProduct","handleRemoveProduct","id","variables","optimisticResponse","__typename","update","proxy","readQuery","query","writeQuery","products","filter","product","map"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAASA,GAAT,EAAcC,WAAd,EAA2BC,QAA3B,QAA2C,gBAA3C;AAEA,SAASC,WAAT,QAA4B,OAA5B;AACA,SAASC,WAAT,QAA4B,eAA5B;AAEA,OAAO,IAAMC,cAAc,GAAGL,GAAH,mBAApB;AAmBP,OAAO,IAAMM,uBAAuB,GAAGN,GAAH,oBAA7B;AAMP,OAAO,IAAMO,WAAoC,GAAG,SAAvCA,WAAuC,GAAM;AAAA,kBACvCL,QAAQ,CAAgBG,cAAhB,EAAgC;AACvDG,IAAAA,WAAW,EAAE;AAD0C,GAAhC,CAD+B;AAAA,MAChDC,IADgD,aAChDA,IADgD;;AAAA,qBAIhCR,WAAW,CAAwBK,uBAAxB,CAJqB;AAAA;AAAA,MAIjDI,aAJiD;;AAKxD,MAAMC,mBAAmB,GAAGR,WAAW,CAAC,UAACS,EAAD,EAAgB;AACtDF,IAAAA,aAAa,CAAC;AACZG,MAAAA,SAAS,EAAE;AACTD,QAAAA,EAAE,EAAFA;AADS,OADC;AAIZE,MAAAA,kBAAkB,EAAE;AAClBC,QAAAA,UAAU,EAAE,UADM;AAElBL,QAAAA,aAAa,EAAEE;AAFG,OAJR;AAQZI,MAAAA,MAAM,EAAE,gBAACC,KAAD,EAAW;AACjB,YAAMR,IAAI,GAAGQ,KAAK,CAACC,SAAN,CAA+B;AAAEC,UAAAA,KAAK,EAAEd;AAAT,SAA/B,CAAb;AACAY,QAAAA,KAAK,CAACG,UAAN,CAAiB;AACfD,UAAAA,KAAK,EAAEd,cADQ;AAEfI,UAAAA,IAAI,oBACCA,IADD;AAEFY,YAAAA,QAAQ,EAAEZ,IAAI,CAACY,QAAL,CAAcC,MAAd,CAAqB,UAACC,OAAD;AAAA,qBAAaA,OAAO,CAACX,EAAR,KAAeA,EAA5B;AAAA,aAArB;AAFR;AAFW,SAAjB;AAOD;AAjBW,KAAD,CAAb;AAmBD,GApBsC,EAoBpC,EApBoC,CAAvC;AAqBA,MAAMS,QAAQ,GAAGZ,IAAI,IAAIA,IAAI,CAACY,QAA9B;AACA,SACE;AAAI,IAAA,SAAS,EAAC,cAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGA,QAAQ,IACPA,QAAQ,CAACG,GAAT,CAAa,UAACD,OAAD;AAAA,WACX,MAAC,WAAD;AAAa,MAAA,GAAG,EAAEA,OAAO,CAACX,EAA1B;AAA8B,MAAA,OAAO,EAAEW,OAAvC;AAAgD,MAAA,QAAQ,EAAEZ,mBAA1D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADW;AAAA,GAAb,CAFJ,CADF;AAQD,CAnCM","sourcesContent":["import { gql, useMutation, useQuery } from '@apollo/client';\nimport { ProductsQuery, RemoveProductMutation } from 'generated';\nimport { useCallback } from 'react';\nimport { ProductItem } from './ProductItem';\n\nexport const PRODUCTS_QUERY = gql`\n  query Products {\n    products {\n      id\n      name\n      type\n      ... on Shirt {\n        shirtColor: color\n        size\n      }\n      ... on Pants {\n        color\n        width\n        length\n      }\n    }\n  }\n`;\n\nexport const REMOVE_PRODUCT_MUTATION = gql`\n  mutation RemoveProduct($id: ID!) {\n    removeProduct(id: $id)\n  }\n`;\n\nexport const ProductList: React.FunctionComponent = () => {\n  const { data } = useQuery<ProductsQuery>(PRODUCTS_QUERY, {\n    fetchPolicy: 'cache-only',\n  });\n  const [removeProduct] = useMutation<RemoveProductMutation>(REMOVE_PRODUCT_MUTATION);\n  const handleRemoveProduct = useCallback((id: number) => {\n    removeProduct({\n      variables: {\n        id,\n      },\n      optimisticResponse: {\n        __typename: 'Mutation',\n        removeProduct: id,\n      },\n      update: (proxy) => {\n        const data = proxy.readQuery<ProductsQuery>({ query: PRODUCTS_QUERY });\n        proxy.writeQuery({\n          query: PRODUCTS_QUERY,\n          data: {\n            ...data,\n            products: data.products.filter((product) => product.id !== id),\n          },\n        });\n      },\n    });\n  }, []);\n  const products = data && data.products;\n  return (\n    <ul className=\"product-list\">\n      {products &&\n        products.map((product) => (\n          <ProductItem key={product.id} product={product} onRemove={handleRemoveProduct}></ProductItem>\n        ))}\n    </ul>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}